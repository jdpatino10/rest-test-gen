[comment encoding = UTF-8 /]
[module main('http://www.eclipse.org/uml2/5.0.0/UML')/]
[import ::utils /]


[template public generate(c : Class)]
[comment @main/]
    [c.genRestTest(c.getModel().getBackendProjectName().concat(c.getModel().baseTestPath()))/]
[/template]

[template protected genRestTest(c : Class, path : String) {className : String = c.getAPITestName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
package [c.getModel().baseGroup()/].test.services;

import [c.getModel().baseGroup()/].dtos.*;
import [c.getModel().baseGroup()/].providers.EJBExceptionMapper;
import [c.getModel().baseGroup()/].services.[c.getJaxRsName()/];


import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.codehaus.jackson.map.ObjectMapper;
import org.glassfish.jersey.filter.LoggingFilter;
import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.container.test.api.RunAsClient;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.Archive;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.jboss.shrinkwrap.resolver.api.DependencyResolvers;
import org.jboss.shrinkwrap.resolver.api.maven.MavenDependencyResolver;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import uk.co.jemos.podam.api.PodamFactory;
import uk.co.jemos.podam.api.PodamFactoryImpl;  

/**
 * @generated
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
@RunWith(Arquillian.class)
public class [className/] {

    public final static String URLRESOURCES = "src/main/webapp";
    public final static String URLBASE = "http://localhost:8181/[c.getModel().getWebProjectName()/]/webresources";
    public final static String PATH = "/[c.getURI()/]";
    public final static int Ok = 200;
    public final static int Created = 201;
    public final static int OkWithoutContent = 204;
    public final static List<[c.getDTOName()/]> data = new ArrayList<>();
    
    /**
     * @generated
     */
    @Deployment
    public static Archive<?> createDeployment() {
        MavenDependencyResolver resolver = DependencyResolvers.use(MavenDependencyResolver.class).loadMetadataFromPom("pom.xml");
        WebArchive war = ShrinkWrap
                // Nombre del Proyecto "AppMarketPlace.web" seguido de ".war". Debe ser el mismo nombre del proyecto web que contiene los javascript y los  servicios Rest
                .create(WebArchive.class, "[c.getModelName()/].web.war")
                // Se agrega la dependencia a la logica con el nombre groupid:artefactid:version (GAV)
                .addAsLibraries(resolver.artifact("[c.getModel().baseGroup()/]:[c.getModel().getBackendProjectName()/]:1.0")
                        .resolveAsFiles())
                // Se agregan los compilados de los paquetes de servicios
                .addPackage([c.getJaxRsName()/].class.getPackage())
                .addPackage(EJBExceptionMapper.class.getPackage())
                // El archivo que contiene la configuracion a la base de datos. 
                .addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                // El archivo shiro.ini 
                .addAsWebInfResource(new File("src/main/webapp/WEB-INF/shiro.ini"))
                // El archivo beans.xml es necesario para injeccion de dependencias. 
                .addAsWebInfResource(new File("src/main/webapp/WEB-INF/beans.xml"))
                // El archivo web.xml es necesario para el despliegue de los servlets
                .setWebXML(new File("src/main/webapp/WEB-INF/web.xml"));
        return war;
    }
    
    /**
     * @generated
     */
    @BeforeClass
    public static void setUp() throws IOException {
        for (int i = 0; i < 5; i++) {
            PodamFactory factory = new PodamFactoryImpl();
            [c.getDTOName()/] dto = factory.manufacturePojo([c.getDTOName()/].class);
            data.add(dto);
        }

    }
    
    //Metodo para autenticarse de ser necesario, recuerde que esto depende de los permisos que se encuentran en el archivo shiro.ini
    private static Cookie login(String username, String password) {
        Client cliente = ClientBuilder.newClient();

        UserDTO user = new UserDTO();
        user.setUserName(username);
        user.setPassword(password);

        Response response = cliente.target(URLBASE).path("/users/login").request().
                post(Entity.entity(user, MediaType.APPLICATION_JSON));

        UserDTO foundUser = (UserDTO) response.readEntity(UserDTO.class);

        if (foundUser != null && response.getStatus() == Ok) {
            return response.getCookies().get("JSESSIONID");
        } else {
            return null;
        }
    }
    
    /**
     * @generated
     */
    @Test
    @RunAsClient
    public void t1Create[c.name/]() {
        [c.getDTOName()/] dto = data.get(0);
        Client cliente = ClientBuilder.newClient();
        PodamFactory factory = new PodamFactoryImpl();
        Response response;
        [for (att : Property | c.getReferences(true) )]
        [att.getClass().getDTOName()/] [att.name/] = factory.manufacturePojo([att.getClass().getDTOName()/].class);
        response = cliente.target(URLBASE).path("/[att.getClass().getURI()/]")
                .request()
                .post(Entity.entity([att.name/], MediaType.APPLICATION_JSON));
        [att.name/] = ([att.getClass().getDTOName()/]) response.readEntity([att.getClass().getDTOName()/].class);
        dto.[att.setter()/]([att.name/]);

        [/for]

        response = cliente.target(URLBASE + PATH)
                .request()
                .post(Entity.entity(dto, MediaType.APPLICATION_JSON));
        [c.getDTOName()/] result = ([c.getDTOName()/]) response.readEntity([c.getDTOName()/].class);
        Assert.assertEquals(dto.getId(), result.getId());
        Assert.assertEquals(Created, response.getStatus());
    }    
    
    /**
     * @generated
     */
    @Test
    @RunAsClient
    public void t2Get[c.name/]ById() {
        Client cliente = ClientBuilder.newClient();
        [c.getDTOName()/] [c.name.toLower()/]Test = cliente.target(URLBASE + PATH).path("/" + data.get(0).getId())
                .request().get([c.getDTOName()/].class);
        Assert.assertEquals([c.name.toLower()/]Test.getId(), data.get(0).getId());
    }
    
    /**
     * @generated
     */
    @Test
    @RunAsClient
    public void t3Get[c.name/]s() throws IOException {
        Client cliente = ClientBuilder.newClient();
        Response response = cliente.target(URLBASE + PATH)
                .request().get();
        String list[c.name/] = response.readEntity(String.class);
        List<[c.getDTOName()/]> list[c.name/]Test = new ObjectMapper().readValue(list[c.name/], List.class);
        Assert.assertEquals(Ok, response.getStatus());
        Assert.assertEquals(1, list[c.name/]Test.size());
    }
    
    /**
     * @generated
     */
    @Test
    @RunAsClient
    public void t4Update[c.name/]() throws IOException {
        Client cliente = ClientBuilder.newClient();
        [c.getDTOName()/] [c.name.toLower()/] = cliente.target(URLBASE + PATH).path("/" + data.get(0).getId())
                .request().get([c.getDTOName()/].class);
        PodamFactory factory = new PodamFactoryImpl();
        [c.getDTOName()/] [c.name.toLower()/]Changed = factory.manufacturePojo([c.getDTOName()/].class);
        [for (att : Property | c.attribute)]
        [c.name.toLower()/].[att.setter()/]([c.name.toLower()/]Changed.[att.getter()/]());
        [/for]
        
        
        
                
        
        Response response = cliente.target(URLBASE + PATH).path("/" + [c.name.toLower()/].getId())
                .request().put(Entity.entity([c.name.toLower()/], MediaType.APPLICATION_JSON));
        [c.getDTOName()/] [c.name.toLower()/]Test = ([c.getDTOName()/]) response.readEntity([c.getDTOName()/].class);
        Assert.assertEquals(Ok, response.getStatus());
        [for (att : Property | c.attribute)]
        Assert.assertEquals([c.name.toLower()/].[att.getter()/](), [c.name.toLower()/]Test.[att.getter()/]());
        [/for]

    }
    
    /**
     * @generated
     */
    @Test
    @RunAsClient
    public void t5Delete[c.name/]() {
        Client cliente = ClientBuilder.newClient();
        [c.getDTOName()/] [c.name.toLower()/] = data.get(0);
        Response response = cliente.target(URLBASE + PATH).path("/" + [c.name.toLower()/].getId())
                .request().delete();
        Assert.assertEquals(OkWithoutContent, response.getStatus());
    }
}
[/file]
[/template]